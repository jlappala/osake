import java.io.IOException;
import java.util.Vector;
import java.util.regex.Pattern;

/**
 * MessageHandler class has methods that are used to process messages from 
 * server. ProcessMessage method first decomposes the message into parts and
 * chooses the handling method according to the first part of the message.
 * Handling methods then call methods of the Controller class to update UI.
 * MessageHandler also relays messages generated by user actions to Client 
 * object for sending to the server.
 */
public class MessageHandler {
	
	private Controller controller = null;
	private Client client;
	
	public MessageHandler(Client cl){		
		this.client = cl;
	}	
	
    /**
     * Associates an instance of controller class with this MessageHandler
     * @param c Controller to be associated
     */
    public void setController(Controller c){
        this.controller = c;
    }
    
	/**
	 * Breaks a string in to parts using '#' character as a separator,
	 * and chooses the right method for processing. Refer to interface documentation
	 * for more specific information.
	 * @param s, string to be processed
	 */
	public void processMessage(String s){
				
        Pattern p = Pattern.compile("#");
	    String[] items = p.split(s);	

        String cmd = items[0];    	

        if(cmd.equals("SAY")){
            updateChatArea(items);
        }else if(cmd.equals("UDNM")){
            updateNames(items);	
        }else if(cmd.equals("UDGM")){
            updateGames(items);	
        }else if(cmd.equals("UDST")){
            updateStocks(items);
        }else if(cmd.equals("UDPS")){
            updatePossession(items);
        }else if(cmd.equals("UDMO")){
            updateMoney(items);			
        }else if(cmd.equals("UDVAL")){
            updatePossessionValues(items);	
        }else if(cmd.equals("UDWTH")){
            updateTotalWealth(items);	
        }else if(cmd.equals("UDDEP")){
            updateDeposits(items);	
        }else if(cmd.equals("UDLN")){
            updateLoan(items);	
        }else if(cmd.equals("UDINTR")){
            updateInterests(items);
        }else if(cmd.equals("SERVER")){
            showServerMessage(items);		
        }else if(cmd.equals("BROKE")){
            clearPossessions();	
        }else if(cmd.equals("GAMEOVER")){
            endGame(items);	
        }
    }

	/**
	 * Relays a message that adds the player to a specific game
	 * @param name Name of the game player is joining in
	 */
	public void joinGame(String name){
		
		String message = "JOGM#" + name;
		
		sendMessage(message);		
	}
	
	/**
	 * Relays a message for buying specific company's stocks
	 * @param items Array containing company number and stock price
	 * @param amount Amount of purchased stocks
	 */
	public void buyStocks(Object[] items, int amount){
		
		String message = "BUY#" + items[0].toString() + "#" + items[3].toString() + "#" + amount;
		
		sendMessage(message);
	}
        	
	/**
	 * Relays a message for selling specific company's stocks
	 * @param items Array containing company number
	 * @param amount Amount of sold stocks
	 */
	public void sellStocks(Object[] items, int amount){
		
		String message = "SELL#" + items[0].toString() + "#" + amount;
		
		sendMessage(message);
	}
        
    /**
     * Relays a message for withdrawing money
     * @param amount Amount of money withdrawn
     */
    public void withdrawMoney(int amount){

        String message = "WDRMN#" + amount;

        sendMessage(message);
	}
		
    /**
     * Relays a message for depositing money
     * @param amount Amount of deposit
     */
    public void depositMoney(int amount){

        String message = "DEPMN#" + amount;

        sendMessage(message);
	}
        
    /**
     * Relays a message for taking a loan
     * @param amount Amount of loan taken
     */
    public void takeLoan(int amount){

        String message = "ADLN#" + amount;

        sendMessage(message);
	}
    
    /**
     * Relays a message for paying loan
     * @param amount Amount of loan paid
     */
    public void payLoan(int amount){

        String message = "PAYLN#" + amount;

        sendMessage(message);
	}
    
    /**
	 * Relays a message for disconnecting from server
	 */
	public void disconnect(){
		
		try {
			client.disconnect();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Relays a message to an instance of Client, 
	 * which will then send the message to the server
	 * @param msg Message sent
	 */
	public void sendMessage(String msg){
		client.send(msg);
	}	
		
    
	/**
	 * Calls controller to show a chat message
	 * @param msg Chat message shown
	 */
	public void updateChatArea(String[] msg){
		
		controller.addText(msg[1]);
	}
    
	/**
	 * Calls controller to update list of player names
	 * @param names Array containing player names
	 */
	private void updateNames(String[] names){	
		controller.clearNames();
	
		for(int i=1; i<names.length; i++){
		 controller.addName(names[i]);       
		 }
	}	
		
	/**
	 * Calls controller to update list of games
	 * @param games Array containing game names
	 */
	private void updateGames(String[] games){	
		controller.clearGames();
	
		for(int i=1; i<games.length; i++){
		    controller.addGame(games[i]);       
		 }
	}
	
	/**
	 * Calls controller to update the stock table
	 * @param stocks Array containing all stock information
	 */
	public void updateStocks(String[] stocks){
		
		int r = Integer.parseInt(stocks[1]);
				
    	if(stocks.length == 5){
    		
	    	for(int i=1; i<stocks.length; i++){	
	    		
	    		controller.updateStock(stocks[i] , r-1, i-1);   	
	        }
    	}
	}
	
	/**
	 * Calls controller to update player money
	 * @param items Array containing player money information
	 */
	private void updateMoney(String[] items){
		controller.updateMoney(items[1]);		
	}	
	
	/**
	 * Calls controller to update player total wealth
	 * @param items Array containing player wealth information
	 */
	private void updateTotalWealth(String[] items){		
		controller.updateWealth(items[1]);	
	}
	
	/**
	 * Calls controller to update the list of players' stock value 
	 * @param items Array containing stock values of all players
	 */
	private void updatePossessionValues(String[] items){		
		controller.clearOtherPlayers();	
		
		for(int i=1; i<items.length; i++){
			controller.updateStatus(items[i]);       
		}
	}
	
	/**
	 * Calls controller to update how much player owns certain stock
	 * and how much he/she has spent on them on average
	 * @param items Array containing company number, amount owned and amount spent
	 */
	private void updatePossession(String[] items){
				
		int r = Integer.parseInt(items[1]);
		
		controller.updateStock(items[2], r-1, 5);
		controller.updateStock(items[3], r-1, 4);
	}
        
    /**
     * Calls controller to update amount of deposits player has
     * @param items Array containing amount of deposits
     */
    private void updateDeposits(String[] items){
				
		String value = items[1];
		
		controller.updateDeposit(value);
	}
    
    /**
     * Calls controller to update amount of loan player has
     * @param items Array containing amount of loan
     */
    private void updateLoan(String[] items){
    	
    	String value = items[1];
    	
    	controller.updateLoan(value);
    }
    
    /**
     * Calls controller to update information on bank interest rates
     * @param items Array containing interest rates of deposits and loans
     */
    private void updateInterests(String[] items){
    	if(items.length>2){
    		String depInt = items[1];
    		String loanInt = items[2];
    		
    		controller.updateInterestRates(depInt, loanInt);
    	}
    }	
    
	/**
	 * Calls controller to show player a message from server
	 * @param items Array containing message from server
	 */
	private void showServerMessage(String[] items){	
		
	    controller.updateServerArea(items[1]);  		 	
	}
	
	/**
	 * Calls controller to clear fields in the stock table that show how many 
	 * stocks he/she owns and their average value
	 */
	private void clearPossessions(){
		controller.clearPossessions();
	}
	
	/**
	 * Enters information of player attributes to instances of PlayerInfo class
	 * at the end of the game. Then calls controller to show the information in
	 * the end window.
	 * @param items Array containing name, final money, deposits, loans and stock value
	 * of all players
	 */
	private void endGame(String[] items){

		Vector<PlayerInfo> players = new Vector<PlayerInfo>();
		
		for(int i=1; i<items.length-4; i=i+5){
			PlayerInfo plr = new PlayerInfo();
			plr.setName(items[i]);
			plr.setMoney(Integer.parseInt(items[i+1]));
			plr.setDeposits(Integer.parseInt(items[i+2]));
			plr.setLoans(Integer.parseInt(items[i+3]));
			plr.setStockValue(Integer.parseInt(items[i+4]));
			players.add(plr);
		}		
		controller.setPlayers(players);		
		controller.showEndWindow();
	}
		
}